// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	time "time"

	mock "github.com/stretchr/testify/mock"

	transactions "cozy-inn/businesses/transactions"
)

// UseCase is an autogenerated mock type for the UseCase type
type UseCase struct {
	mock.Mock
}

// AdminDeleteTransaction provides a mock function with given fields: transactionID
func (_m *UseCase) AdminDeleteTransaction(transactionID string) error {
	ret := _m.Called(transactionID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(transactionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AdminGetAllTransaction provides a mock function with given fields:
func (_m *UseCase) AdminGetAllTransaction() ([]transactions.Domain, error) {
	ret := _m.Called()

	var r0 []transactions.Domain
	if rf, ok := ret.Get(0).(func() []transactions.Domain); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]transactions.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminUpdateTransaction provides a mock function with given fields: transactionID, userInput
func (_m *UseCase) AdminUpdateTransaction(transactionID string, userInput transactions.Domain) (transactions.Domain, error) {
	ret := _m.Called(transactionID, userInput)

	var r0 transactions.Domain
	if rf, ok := ret.Get(0).(func(string, transactions.Domain) transactions.Domain); ok {
		r0 = rf(transactionID, userInput)
	} else {
		r0 = ret.Get(0).(transactions.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, transactions.Domain) error); ok {
		r1 = rf(transactionID, userInput)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelTransaction provides a mock function with given fields: transactionID, email
func (_m *UseCase) CancelTransaction(transactionID string, email string) error {
	ret := _m.Called(transactionID, email)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(transactionID, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CheckAvailabilityAllRoom provides a mock function with given fields: startDate, endDate
func (_m *UseCase) CheckAvailabilityAllRoom(startDate time.Time, endDate time.Time) ([]string, error) {
	ret := _m.Called(startDate, endDate)

	var r0 []string
	if rf, ok := ret.Get(0).(func(time.Time, time.Time) []string); ok {
		r0 = rf(startDate, endDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(time.Time, time.Time) error); ok {
		r1 = rf(startDate, endDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTransaction provides a mock function with given fields: email, transactionInput
func (_m *UseCase) CreateTransaction(email string, transactionInput transactions.Domain) (transactions.Domain, error) {
	ret := _m.Called(email, transactionInput)

	var r0 transactions.Domain
	if rf, ok := ret.Get(0).(func(string, transactions.Domain) transactions.Domain); ok {
		r0 = rf(email, transactionInput)
	} else {
		r0 = ret.Get(0).(transactions.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, transactions.Domain) error); ok {
		r1 = rf(email, transactionInput)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllPaymentNotVerified provides a mock function with given fields:
func (_m *UseCase) GetAllPaymentNotVerified() ([]transactions.Domain, error) {
	ret := _m.Called()

	var r0 []transactions.Domain
	if rf, ok := ret.Get(0).(func() []transactions.Domain); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]transactions.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllReadyCheckIn provides a mock function with given fields:
func (_m *UseCase) GetAllReadyCheckIn() ([]transactions.Domain, error) {
	ret := _m.Called()

	var r0 []transactions.Domain
	if rf, ok := ret.Get(0).(func() []transactions.Domain); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]transactions.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllReadyCheckOut provides a mock function with given fields:
func (_m *UseCase) GetAllReadyCheckOut() ([]transactions.Domain, error) {
	ret := _m.Called()

	var r0 []transactions.Domain
	if rf, ok := ret.Get(0).(func() []transactions.Domain); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]transactions.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllTransactionUser provides a mock function with given fields: email
func (_m *UseCase) GetAllTransactionUser(email string) ([]transactions.Domain, error) {
	ret := _m.Called(email)

	var r0 []transactions.Domain
	if rf, ok := ret.Get(0).(func(string) []transactions.Domain); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]transactions.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCheckInTransaction provides a mock function with given fields: transactionID
func (_m *UseCase) GetCheckInTransaction(transactionID string) (transactions.Domain, error) {
	ret := _m.Called(transactionID)

	var r0 transactions.Domain
	if rf, ok := ret.Get(0).(func(string) transactions.Domain); ok {
		r0 = rf(transactionID)
	} else {
		r0 = ret.Get(0).(transactions.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(transactionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCheckOutTransaction provides a mock function with given fields: transactionID
func (_m *UseCase) GetCheckOutTransaction(transactionID string) (transactions.Domain, error) {
	ret := _m.Called(transactionID)

	var r0 transactions.Domain
	if rf, ok := ret.Get(0).(func(string) transactions.Domain); ok {
		r0 = rf(transactionID)
	} else {
		r0 = ret.Get(0).(transactions.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(transactionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransaction provides a mock function with given fields: transactionID
func (_m *UseCase) GetTransaction(transactionID string) (transactions.Domain, error) {
	ret := _m.Called(transactionID)

	var r0 transactions.Domain
	if rf, ok := ret.Get(0).(func(string) transactions.Domain); ok {
		r0 = rf(transactionID)
	} else {
		r0 = ret.Get(0).(transactions.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(transactionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionOnVerification provides a mock function with given fields: transactionID
func (_m *UseCase) GetTransactionOnVerification(transactionID string) (transactions.Domain, error) {
	ret := _m.Called(transactionID)

	var r0 transactions.Domain
	if rf, ok := ret.Get(0).(func(string) transactions.Domain); ok {
		r0 = rf(transactionID)
	} else {
		r0 = ret.Get(0).(transactions.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(transactionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReceptionistCreateTransaction provides a mock function with given fields: transactionInput
func (_m *UseCase) ReceptionistCreateTransaction(transactionInput transactions.Domain) (transactions.Domain, error) {
	ret := _m.Called(transactionInput)

	var r0 transactions.Domain
	if rf, ok := ret.Get(0).(func(transactions.Domain) transactions.Domain); ok {
		r0 = rf(transactionInput)
	} else {
		r0 = ret.Get(0).(transactions.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(transactions.Domain) error); ok {
		r1 = rf(transactionInput)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCheckIn provides a mock function with given fields: transactionID
func (_m *UseCase) UpdateCheckIn(transactionID string) (transactions.Domain, error) {
	ret := _m.Called(transactionID)

	var r0 transactions.Domain
	if rf, ok := ret.Get(0).(func(string) transactions.Domain); ok {
		r0 = rf(transactionID)
	} else {
		r0 = ret.Get(0).(transactions.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(transactionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCheckOut provides a mock function with given fields: transactionID
func (_m *UseCase) UpdateCheckOut(transactionID string) (transactions.Domain, error) {
	ret := _m.Called(transactionID)

	var r0 transactions.Domain
	if rf, ok := ret.Get(0).(func(string) transactions.Domain); ok {
		r0 = rf(transactionID)
	} else {
		r0 = ret.Get(0).(transactions.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(transactionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePayment provides a mock function with given fields: transactionID, email, payment_URL
func (_m *UseCase) UpdatePayment(transactionID string, email string, payment_URL string) (transactions.Domain, error) {
	ret := _m.Called(transactionID, email, payment_URL)

	var r0 transactions.Domain
	if rf, ok := ret.Get(0).(func(string, string, string) transactions.Domain); ok {
		r0 = rf(transactionID, email, payment_URL)
	} else {
		r0 = ret.Get(0).(transactions.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(transactionID, email, payment_URL)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateVerification provides a mock function with given fields: transactionID, status
func (_m *UseCase) UpdateVerification(transactionID string, status string) (transactions.Domain, error) {
	ret := _m.Called(transactionID, status)

	var r0 transactions.Domain
	if rf, ok := ret.Get(0).(func(string, string) transactions.Domain); ok {
		r0 = rf(transactionID, status)
	} else {
		r0 = ret.Get(0).(transactions.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(transactionID, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewUseCase creates a new instance of UseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUseCase(t mockConstructorTestingTNewUseCase) *UseCase {
	mock := &UseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
