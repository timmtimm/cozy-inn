// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	rooms "cozy-inn/businesses/rooms"

	mock "github.com/stretchr/testify/mock"
)

// UseCase is an autogenerated mock type for the UseCase type
type UseCase struct {
	mock.Mock
}

// CreateRoom provides a mock function with given fields: roomDomain
func (_m *UseCase) CreateRoom(roomDomain rooms.Domain) error {
	ret := _m.Called(roomDomain)

	var r0 error
	if rf, ok := ret.Get(0).(func(rooms.Domain) error); ok {
		r0 = rf(roomDomain)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteRoom provides a mock function with given fields: roomType
func (_m *UseCase) DeleteRoom(roomType string) error {
	ret := _m.Called(roomType)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(roomType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllRoom provides a mock function with given fields:
func (_m *UseCase) GetAllRoom() ([]rooms.Domain, error) {
	ret := _m.Called()

	var r0 []rooms.Domain
	if rf, ok := ret.Get(0).(func() []rooms.Domain); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]rooms.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRoom provides a mock function with given fields: roomType
func (_m *UseCase) GetRoom(roomType string) (rooms.Domain, error) {
	ret := _m.Called(roomType)

	var r0 rooms.Domain
	if rf, ok := ret.Get(0).(func(string) rooms.Domain); ok {
		r0 = rf(roomType)
	} else {
		r0 = ret.Get(0).(rooms.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(roomType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRoom provides a mock function with given fields: roomDomain
func (_m *UseCase) UpdateRoom(roomDomain rooms.Domain) (rooms.Domain, error) {
	ret := _m.Called(roomDomain)

	var r0 rooms.Domain
	if rf, ok := ret.Get(0).(func(rooms.Domain) rooms.Domain); ok {
		r0 = rf(roomDomain)
	} else {
		r0 = ret.Get(0).(rooms.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(rooms.Domain) error); ok {
		r1 = rf(roomDomain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewUseCase creates a new instance of UseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUseCase(t mockConstructorTestingTNewUseCase) *UseCase {
	mock := &UseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
